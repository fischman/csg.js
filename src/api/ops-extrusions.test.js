const test = require('ava')
const CAG = require('../core/CAG')
const CSG = require('../core/CSG')
const { circle, square } = require('./primitives2d-api')
const { linear_extrude, rotate_extrude, rectangular_extrude } = require('./ops-extrusions')
const { simplifiedPolygon } = require('./test-helpers')

test('linear_extrude (height)', t => {
  const op1 = square()
  const obs = linear_extrude({ height: 10 }, op1)

  const expFirstPoly = {
    vertices: [ { pos: { _x: 1, _y: 1, _z: 0 } },
      { pos: { _x: 1, _y: 0, _z: 0 } },
      { pos: { _x: 0, _y: 0, _z: 0 } },
      { pos: { _x: 0, _y: 1, _z: 0 } } ],
    shared: { color: null },
    plane: { normal: { _x: -0, _y: -0, _z: -1 }, w: -0 }
  }

  const expLastPoly = {
    vertices: [ { pos: { _x: 0, _y: 1, _z: 10 } },
      { pos: { _x: 1, _y: 1, _z: 0 } },
      { pos: { _x: 0, _y: 1, _z: 0 } } ],
    shared: { color: null },
    plane: { normal: { _x: 0, _y: 1, _z: 0 }, w: 1 }
  }

  t.deepEqual(obs.polygons.length, 10)
  t.deepEqual(obs.polygons[0], expFirstPoly)
  t.deepEqual(obs.polygons[obs.polygons.length - 1], expLastPoly)
})

test('linear_extrude (height, twist, slices, center)', t => {
  const op1 = square()
  const obs = linear_extrude({ height: 10, twist: 360, slices: 50, center: true }, op1)

  const expFirstPoly = {
    vertices: [ { pos: { _x: 1, _y: 1, _z: -5 } },
      { pos: { _x: 1, _y: 0, _z: -5 } },
      { pos: { _x: 1.1102230246251565e-16, _y: 0, _z: -5 } },
      { pos: { _x: 1.1102230246251565e-16, _y: 1, _z: -5 } } ],
    shared: { color: null },
    plane: { normal: { _x: -0, _y: -0, _z: -1 }, w: 5 }
  }

  const expLastPoly = {
    vertices: [ { pos: { _x: 3.3306690738754696e-16, _y: 1, _z: 5 } },
      { pos: { _x: 1.1174479348787818, _y: 0.8667814677501742, _z: 4.800000000000001 } },
      { pos: { _x: 0.12533323356430387, _y: 0.9921147013144779, _z: 4.800000000000001 } } ],
    shared: { color: null },
    plane: { normal: { _x: 0.12523593496267418, _y: 0.9913445035756271, _z: 0.03939588588188166 },
      w: 1.188323932985035 }
  }

  t.deepEqual(obs.polygons.length, 402)
  t.deepEqual(obs.polygons[0], expFirstPoly)
  t.deepEqual(obs.polygons[obs.polygons.length - 1], expLastPoly)
})

test('rotate_extrude (defaults)', t => {
  const op1 = square()
  const obs = rotate_extrude(op1.translate([4, 0, 0]))

  const expFirstPoly = { positions:
  [ [ 3.923141121612922, -0.780361288064513, 1.0000000000000004 ],
      [ 4.000000000000001, 0, 1.0000000000000004 ],
      [ 4.000000000000001, 0, 0 ],
      [ 3.923141121612922, -0.780361288064513, 0 ] ],
    plane:
    { normal: [ -0.9951847266721969, 0.09801714032956071, 0 ],
      w: -3.9807389066887877 },
    shared: { color: null, tag: 1612 } }

  const expLastPoly = { positions:
  [ [ 4.903926402016151, 0.9754516100806419, 1 ],
      [ 4.999999999999999, 1.6653345369377348e-16, 1 ],
      [ 5, 0, 0 ],
      [ 4.903926402016151, 0.9754516100806419, 0 ] ],
    plane:
    { normal: [ 0.9951847266721968, 0.09801714032956149, -0 ],
      w: 4.975923633360985 },
    shared: { color: null, tag: 1612 } }

  t.deepEqual(obs.polygons.length, 132)
  t.deepEqual(simplifiedPolygon(obs.polygons[0]), expFirstPoly)
  t.deepEqual(simplifiedPolygon(obs.polygons[obs.polygons.length - 1]), expLastPoly)
})

test('rotate_extrude (custom resolution)', t => {
  const op1 = square()
  const obs = rotate_extrude({fn: 4}, op1.translate([4, 0, 0]))

  const expFirstPoly = { positions:
  [ [ 2.82842712474619, -2.82842712474619, 1 ],
      [ 4, 0, 1 ],
      [ 4, 0, 0 ],
      [ 2.82842712474619, -2.82842712474619, 0 ] ],
    plane:
    { normal: [ -0.9238795325112867, 0.3826834323650898, 0 ],
      w: -3.695518130045147 },
    shared: { color: null, tag: 1612 } }

  const expLastPoly = { positions:
  [ [ 3.53553390593274, 3.5355339059327373, 1 ],
        [ 5, 0, 1 ],
        [ 5, 0, 0 ],
        [ 3.53553390593274, 3.5355339059327373, 0 ] ],
    plane:
    { normal: [ 0.9238795325112867, 0.38268343236508956, -0 ],
      w: 4.619397662556434 },
    shared: { color: null, tag: 1612 } }

  t.deepEqual(obs.polygons.length, 36)
  t.deepEqual(simplifiedPolygon(obs.polygons[0]), expFirstPoly)
  t.deepEqual(simplifiedPolygon(obs.polygons[obs.polygons.length - 1]), expLastPoly)
})

test('rotate_extrude (custom angle)', t => {
  const op1 = square()
  const obs = rotate_extrude({angle: 20}, op1.translate([4, 0, 0]))

  const expFirstPoly = { positions:
  [ [ 3.999762020000599, -0.043632365976729495, 1 ],
      [ 4, 0, 1 ],
      [ 4, 0, 0 ],
      [ 3.999762020000599, -0.043632365976729495, 0 ] ],
    plane:
    { normal: [ -0.9999851261394216, 0.00545412687101576, 0 ],
      w: -3.9999405045576863 },
    shared: { color: null, tag: 1612 } }

  const expLastPoly = { positions:
  [ [ 4.716837503949126, -1.6587477087667604, 1 ],
      [ 4.698463103929543, -1.7101007166283435, 1 ],
      [ 4.698463103929543, -1.7101007166283435, 0 ],
      [ 4.716837503949126, -1.6587477087667604, 0 ] ],
    plane:
    { normal: [ 0.9415440651830257, -0.33688985339220645, 0 ],
      w: 4.999925630697108 },
    shared: { color: null, tag: 1612 } }
  t.deepEqual(obs.polygons.length, 192)
  t.deepEqual(simplifiedPolygon(obs.polygons[0]), expFirstPoly)
  t.deepEqual(simplifiedPolygon(obs.polygons[obs.polygons.length - 1]), expLastPoly)
})

test('rotate_extrude (custom negative angle)', t => {
  const op1 = square()
  const obs = rotate_extrude({angle: -20}, op1.translate([4, 0, 0]))

  const expFirstPoly = { positions:
  [ [ 4, 0, 1 ],
      [ 3.999762020000599, 0.043632365976729495, 1 ],
      [ 3.999762020000599, 0.043632365976729495, 0 ],
      [ 4, 0, 0 ] ],
    plane:
    { normal: [ -0.9999851261394216, -0.00545412687101576, 0 ],
      w: -3.9999405045576863 },
    shared: { color: null, tag: 1612 } }

  const expLastPoly = { positions:
  [ [ 4.698463103929543, 1.7101007166283435, 1 ],
      [ 4.716837503949126, 1.6587477087667604, 1 ],
      [ 4.716837503949126, 1.6587477087667604, 0 ],
      [ 4.698463103929543, 1.7101007166283435, 0 ] ],
    plane:
    { normal: [ 0.9415440651830257, 0.33688985339220645, 0 ],
      w: 4.999925630697108 },
    shared: { color: null, tag: 1612 } }
  t.deepEqual(obs.polygons.length, 192)
  t.deepEqual(simplifiedPolygon(obs.polygons[0]), expFirstPoly)
  t.deepEqual(simplifiedPolygon(obs.polygons[obs.polygons.length - 1]), expLastPoly)
})

test('rotate_extrude (custom negative angle, custom start angle)', t => {
  const op1 = square()
  const obs = rotate_extrude({angle: -20, startAngle: 27}, op1.translate([4, 0, 0]))

  const expFirstPoly = { positions:
  [ [ 3.5640260967534716, -1.815961998958187, 1 ],
      [ 3.583622734655973, -1.7769772355482905, 1 ],
      [ 3.583622734655973, -1.7769772355482905, 0 ],
      [ 3.5640260967534716, -1.815961998958187, 0 ] ],
    plane:
    { normal: [ -0.8934693932653679, 0.4491240845223238, 0 ],
      w: -3.9999405045576863 },
    shared: { color: null, tag: 1612 } }

  const expLastPoly = { positions:
  [ [ 4.96273075820661, -0.6093467170257374, 1 ],
      [ 4.955788690799897, -0.66344438511441, 1 ],
      [ 4.955788690799897, -0.66344438511441, 0 ],
      [ 4.96273075820661, -0.6093467170257374, 0 ] ],
    plane:
    { normal: [ 0.991866697787626, -0.12728100337391368, 0 ],
      w: 4.999925630697108 },
    shared: { color: null, tag: 1612 } }
  t.deepEqual(obs.polygons.length, 192)
  t.deepEqual(simplifiedPolygon(obs.polygons[0]), expFirstPoly)
  t.deepEqual(simplifiedPolygon(obs.polygons[obs.polygons.length - 1]), expLastPoly)
})

test('rotate_extrude (custom negative angle, custom start angle, capped points)', t => {
  const op1 = square().translate([-0.5, 0, 0])
  const obs = rotate_extrude({angle: -20, startAngle: 27}, op1)

  const expFirstPoly = { positions:
  [ [ 0.496273075820661, -0.06093467170257374, 0 ],
      [ 0.49557886907998977, -0.06634443851144099, 0 ],
      [ 0.4948256934098351, -0.07174631099558966, 0 ],
      [ 0.49401363843056983, -0.07713964638621444, 0 ],
      [ 0.4931428007686157, -0.08252380293033881, 0 ],
      [ 0.4922132840449458, -0.08789813996717726, 0 ],
      [ 0.49122519886275484, -0.09326201800436731, 0 ],
      [ 0.4901786627942984, -0.09861479879406297, 0 ],
      [ 0.48907380036690284, -0.10395584540887967, 0 ],
      [ 0.4879107430481481, -0.10928452231768229, 0 ],
      [ 0.48668962923022424, -0.11460019546120709, 0 ],
      [ 0.48541060421346405, -0.11990223232750827, 0 ],
      [ 0.48407382018905387, -0.12519000202722072, 0 ],
      [ 0.48267943622092446, -0.13046287536862944, 0 ],
      [ 0.48122761822682364, -0.13572022493253713, 0 ],
      [ 0.4797185389585742, -0.14096142514692075, 0 ],
      [ 0.4781523779815177, -0.14618585236136838, 0 ],
      [ 0.4765293216531485, -0.1513928849212873, 0 ],
      [ 0.4748495631009385, -0.15658190324187476, 0 ],
      [ 0.4731133021993573, -0.1617522898818424, 0 ],
      [ 0.4713207455460892, -0.16690342961688545, 0 ],
      [ 0.4694721064374497, -0.1720347095128884, 0 ],
      [ 0.46756760484300586, -0.17714551899885794, 0 ],
      [ 0.4656074673794018, -0.18223524993957482, 0 ],
      [ 0.4635919272833937, -0.187303296707956, 0 ],
      [ 0.46152122438409704, -0.19234905625711804, 0 ],
      [ 0.45939560507444915, -0.1973719281921336, 0 ],
      [ 0.45721532228189105, -0.20237131484147275, 0 ],
      [ 0.4549806354382716, -0.2073466213281195, 0 ],
      [ 0.4526918104489776, -0.21229725564035656, 0 ],
      [ 0.45034911966129393, -0.21722262870220851, 0 ],
      [ 0.44795284183199663, -0.22212215444353633, 0 ],
      [ 0.44550326209418395, -0.22699524986977337, 0 ],
      [ 0, 0, 0 ] ],
    plane: { normal: [ -0, 0, -1 ], w: -0 },
    shared: { color: null, tag: 1612 } }

  const expLastPoly = { positions:
  [ [ 0.496273075820661, -0.06093467170257374, 1 ],
      [ 0.49557886907998977, -0.06634443851144099, 1 ],
      [ 0.49557886907998977, -0.06634443851144099, 0 ],
      [ 0.496273075820661, -0.06093467170257374, 0 ] ],
    plane:
    { normal: [ 0.991866697787627, -0.12728100337390572, 0 ],
      w: 0.4999925630697108 },
    shared: { color: null, tag: 1612 } }
  t.deepEqual(obs.polygons.length, 98)
  // console.log('first', simplifiedPolygon(obs.polygons[0]))
  // console.log('last', simplifiedPolygon(obs.polygons[obs.polygons.length - 1]))

  t.deepEqual(simplifiedPolygon(obs.polygons[0]), expFirstPoly)
  t.deepEqual(simplifiedPolygon(obs.polygons[obs.polygons.length - 1]), expLastPoly)
})

test('rotate_extrude (invalid overflow setting should throw an exception)', t => {
  const op1 = square().translate([-0.5, 0, 0])
  t.throws(() => {
    rotate_extrude({angle: -20, startAngle: 27, overflow: undefined}, op1)
  }, 'only capping of overflowing points is supported !')
})

test('rectangular_extrude ', t => {
  const op1 = square()
  const obs = rectangular_extrude([ [10, 10], [-10, 10], [-20, 0], [-10, -10], [10, -10] ], // path is an array of 2d coords
    {w: 1, h: 3, closed: true}, op1)

  const expFirstPoly = {
    vertices: [
      { pos: { _x: -11.207106781186544, _y: 9.5, _z: 0 } },
      { pos: { _x: -10.35355339059327, _y: 10.353553390593275, _z: 0 } },
      { pos: { _x: -10.000000000000002, _y: 10.5, _z: 0 } },
      { pos: { _x: 9.5, _y: 10.5, _z: 0 } },
      { pos: { _x: 9.5, _y: 9.5, _z: 0 } } ],
    shared: { color: null, tag: 1612 },
    plane: { normal: { _x: -0, _y: -0, _z: -1 }, w: -0 }
  }

  const expLastPoly = {
    vertices: [
      { pos: { _x: -9.792893218813454, _y: 9.5, _z: 3 } },
      { pos: { _x: -19.292893218813454, _y: -1.1102230246251565e-16, _z: 0 } },
      { pos: { _x: -9.792893218813454, _y: 9.5, _z: 0 } } ],
    shared: { color: null, tag: 1612 },
    plane: { normal: { _x: 0.7071067811865476, _y: -0.7071067811865476, _z: 0 }, w: -13.642135623730951 }
  }
  /* console.log(obs.polygons[0])
  console.log(obs.polygons[0].vertices)
  console.log(obs.polygons[obs.polygons.length - 1])
  console.log(obs.polygons[obs.polygons.length - 1].vertices) */
  t.deepEqual(obs.polygons.length, 46)
  t.deepEqual(obs.polygons[0], expFirstPoly)
  t.deepEqual(obs.polygons[obs.polygons.length - 1], expLastPoly)
})

test('extrude between different shapes', t => {
  const cases = [
    [square({size:[10,10]}).extrude({offset:[0,0,15], cag: square({size:[20,20]})}),
     '{"class":"CSG","numPolygons":6,"numVerticesPerPolygon":{"0":4,"1":4,"2":4,"3":4,"4":4,"5":4},"polygonPlaneIndexes":{"0":0,"1":1,"2":2,"3":3,"4":4,"5":5},"polygonSharedIndexes":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},"polygonVertices":{"0":0,"1":1,"2":2,"3":3,"4":4,"5":5,"6":6,"7":7,"8":4,"9":3,"10":2,"11":5,"12":1,"13":6,"14":5,"15":2,"16":0,"17":7,"18":6,"19":1,"20":7,"21":0,"22":3,"23":4},"vertexData":{"0":10,"1":10,"2":0,"3":10,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":10,"11":0,"12":0,"13":20,"14":15,"15":0,"16":0,"17":15,"18":20,"19":0,"20":15,"21":20,"22":20,"23":15},"planeData":{"0":0,"1":0,"2":-1,"3":0,"4":0,"5":0,"6":1,"7":15,"8":-1,"9":0,"10":0,"11":0,"12":0,"13":-1,"14":0,"15":0,"16":0.8320502943378437,"17":0,"18":-0.5547001962252291,"19":8.320502943378438,"20":0,"21":0.8320502943378437,"22":-0.5547001962252291,"23":8.320502943378438},"shared":[{"color":null,"tag":1612}]}'],
    [square({size: [5,25], center:false}).extrude({offset: [0,0,15], cag: square({size:[10,10], center:true})}),
     '{"class":"CSG","numPolygons":6,"numVerticesPerPolygon":{"0":4,"1":4,"2":4,"3":4,"4":4,"5":4},"polygonPlaneIndexes":{"0":0,"1":1,"2":2,"3":3,"4":4,"5":5},"polygonSharedIndexes":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},"polygonVertices":{"0":0,"1":1,"2":2,"3":3,"4":4,"5":5,"6":6,"7":7,"8":4,"9":3,"10":2,"11":5,"12":1,"13":6,"14":5,"15":2,"16":0,"17":7,"18":6,"19":1,"20":7,"21":0,"22":3,"23":4},"vertexData":{"0":5,"1":25,"2":0,"3":5,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":25,"11":0,"12":-5,"13":5,"14":15,"15":-5,"16":-5,"17":15,"18":5,"19":-5,"20":15,"21":5,"22":5,"23":15},"planeData":{"0":0,"1":0,"2":-1,"3":0,"4":0,"5":0,"6":1,"7":15,"8":-0.9486832980505138,"9":0,"10":-0.3162277660168379,"11":8.881784197001252e-16,"12":0,"13":-0.9486832980505138,"14":-0.3162277660168379,"15":8.881784197001252e-16,"16":1,"17":0,"18":0,"19":5,"20":0,"21":0.6,"22":0.8,"23":15},"shared":[{"color":null,"tag":1612}]}'],
    [circle({r: 10, fn: 5, center:true}).rotateZ(180).extrude({offset: [0,0,15], cag: square({size:[5,25], center:false})}),
     '{"class":"CSG","numPolygons":37,"numVerticesPerPolygon":{"0":5,"1":4,"2":3,"3":3,"4":3,"5":3,"6":3,"7":3,"8":3,"9":3,"10":3,"11":3,"12":3,"13":3,"14":3,"15":3,"16":3,"17":3,"18":3,"19":3,"20":3,"21":3,"22":3,"23":3,"24":3,"25":3,"26":4,"27":3,"28":3,"29":3,"30":3,"31":3,"32":3,"33":3,"34":3,"35":3,"36":3},"polygonPlaneIndexes":{"0":0,"1":1,"2":2,"3":3,"4":4,"5":5,"6":6,"7":7,"8":8,"9":9,"10":10,"11":11,"12":12,"13":13,"14":14,"15":15,"16":16,"17":17,"18":18,"19":19,"20":20,"21":21,"22":22,"23":23,"24":24,"25":25,"26":26,"27":27,"28":28,"29":29,"30":30,"31":31,"32":32,"33":33,"34":34,"35":35,"36":36},"polygonSharedIndexes":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0},"polygonVertices":{"0":0,"1":1,"2":2,"3":3,"4":4,"5":5,"6":6,"7":7,"8":8,"9":9,"10":5,"11":4,"12":9,"13":4,"14":10,"15":11,"16":9,"17":10,"18":11,"19":10,"20":12,"21":13,"22":11,"23":12,"24":13,"25":12,"26":14,"27":15,"28":13,"29":14,"30":15,"31":14,"32":3,"33":6,"34":15,"35":3,"36":6,"37":3,"38":16,"39":17,"40":6,"41":16,"42":17,"43":16,"44":18,"45":19,"46":17,"47":18,"48":19,"49":18,"50":20,"51":21,"52":19,"53":20,"54":21,"55":20,"56":2,"57":22,"58":21,"59":2,"60":22,"61":2,"62":23,"63":7,"64":22,"65":23,"66":7,"67":23,"68":24,"69":25,"70":7,"71":24,"72":25,"73":24,"74":26,"75":27,"76":25,"77":26,"78":27,"79":26,"80":1,"81":28,"82":8,"83":27,"84":1,"85":29,"86":8,"87":28,"88":29,"89":28,"90":0,"91":30,"92":29,"93":0,"94":30,"95":0,"96":31,"97":32,"98":30,"99":31,"100":32,"101":31,"102":33,"103":34,"104":32,"105":33,"106":34,"107":33,"108":35,"109":5,"110":34,"111":35,"112":5,"113":35,"114":4},"vertexData":{"0":8.090169943749473,"1":5.877852522924728,"2":0,"3":8.090169943749473,"4":-5.87785252292473,"5":0,"6":-3.0901699437494745,"7":-9.510565162951533,"8":0,"9":-10,"10":-3.552713678800501e-15,"11":0,"12":-3.0901699437494714,"13":9.510565162951536,"14":0,"15":0,"16":25,"17":15,"18":0,"19":0,"20":15,"21":5,"22":0,"23":15,"24":5,"25":25,"26":15,"27":0,"28":20,"29":15,"30":-4.817627457812103,"31":7.132923872213652,"32":0,"33":0,"34":15,"35":15,"36":-6.545084971874735,"37":4.755282581475768,"38":0,"39":0,"40":10,"41":15,"42":-8.272542485937366,"43":2.3776412907378845,"44":0,"45":0,"46":5,"47":15,"48":-8.272542485937368,"49":-2.3776412907378828,"50":0,"51":1,"52":0,"53":15,"54":-6.545084971874737,"55":-4.755282581475766,"56":0,"57":2,"58":0,"59":15,"60":-4.817627457812106,"61":-7.1329238722136505,"62":0,"63":3,"64":0,"65":15,"66":4,"67":0,"68":15,"69":-0.2950849718747386,"70":-8.602387002944834,"71":0,"72":2.4999999999999987,"73":-7.694208842938133,"74":0,"75":5,"76":5,"77":15,"78":5.295084971874736,"79":-6.7860306829314325,"80":0,"81":5,"82":10,"83":15,"84":8.090169943749471,"85":2.9389262614623632,"86":-6.661338147750939e-16,"87":4,"88":25,"89":15,"90":3,"91":25,"92":15,"93":5.295084971874738,"94":6.786030682931431,"95":0,"96":2,"97":25,"98":15,"99":2.5000000000000018,"100":7.694208842938132,"101":0,"102":1,"103":25,"104":15,"105":-0.2950849718747346,"106":8.602387002944834,"107":0},"planeData":{"0":0,"1":0,"2":-1,"3":0,"4":0,"5":0,"6":1,"7":15,"8":-0.9794320854864141,"9":0,"10":0.20177410616759864,"11":3.0266115925139796,"12":-0.7858919775547755,"13":0.5709839441117788,"14":-0.2373839404458551,"15":7.85891977554775,"16":-0.9520988249587854,"17":0,"18":0.3057904961114722,"19":4.586857441672083,"20":-0.8080694861124121,"21":0.587096847244105,"22":-0.048383856502496846,"23":8.080694861124122,"24":-0.9165476559845515,"25":0,"26":0.39992548594610017,"27":5.998882289191503,"28":-0.8003588586053989,"29":0.5814947484426517,"30":0.1459094067751646,"31":8.003588586053986,"32":-0.8756596384079756,"33":0,"34":0.48292877079670193,"35":7.243931561950529,"36":-0.7651550040718907,"37":0.5559176509743438,"38":0.32479745238981245,"39":7.651550040718906,"40":-0.8320502943378437,"41":0,"42":0.5547001962252291,"43":8.320502943378438,"44":-0.7120534220770299,"45":-0.5173370933507137,"46":0.47470228138468656,"47":7.120534220770298,"48":0,"49":-0.9876692610387734,"50":0.156554881109224,"51":2.34832321663836,"52":-0.6957808811902827,"53":-0.5055144003577855,"54":0.5102393128728739,"55":6.957808811902827,"56":0,"57":-0.9532455581480406,"58":0.3021967999020348,"59":4.532951998530522,"60":-0.6791785770894336,"61":-0.4934521203656407,"62":0.5433428616715468,"63":6.791785770894334,"64":0,"65":-0.9030925300487858,"66":0.42944601776018715,"67":6.441690266402807,"68":-0.6624150707125758,"69":-0.48127272006436445,"70":0.5740930612842322,"71":6.6241507071257555,"72":0,"73":-0.844550081681107,"74":0.5354765723469472,"75":8.032148585204208,"76":0.2810646100643457,"77":-0.8650279232776205,"78":0.41560723877163713,"79":7.35836702183194,"80":0,"81":-0.8674708571767944,"82":0.4974880018140714,"83":7.462320027211071,"84":0.2832288018537496,"85":-0.8716886207191562,"86":0.39992548594610017,"87":7.415026298460251,"88":0.9863939238321437,"89":0,"90":-0.16439898730535737,"91":2.465984809580358,"92":0.246815219169284,"93":-0.7596191367616086,"94":0.6017150610147354,"95":6.461706327259408,"96":0.9998065558329469,"97":0,"98":0.01966852596054281,"99":5.294060668572876,"100":0.21095859930626723,"101":-0.6492638081104488,"102":0.7307208611067949,"103":5.5229678320287725,"104":0.9794320854864141,"105":0,"106":0.20177410616759875,"107":7.9237720199460515,"108":0,"109":0.5622707996642184,"110":-0.8269531714945897,"111":1.6524724191866174,"112":0.964775888261325,"113":0,"114":0.26307315604137804,"115":7.805200893665971,"116":0,"117":0.6171969288729567,"118":-0.7868087130871076,"119":3.627792525517304,"120":0.2070875998087841,"121":0.63735009668463,"122":-0.742226097804119,"123":5.421623749480318,"124":0,"125":0.6357138330256136,"126":-0.7719248166109717,"127":4.313973576475764,"128":0.20922246674150008,"129":0.6439205414975124,"130":-0.735929545301826,"131":5.47751529139342,"132":0,"133":0.6549716227196288,"134":-0.7556534744391877,"135":5.039488451402903,"136":0.21138275900228007,"137":0.6505692374240007,"138":-0.7294360811710224,"139":5.534072477036961,"140":0,"141":0.6749627205427634,"142":-0.7378518319266487,"143":5.8062905346693565,"144":0.21356807373774905,"145":0.6572949446089001,"146":-0.7227392570433201,"147":5.5912847595727015},"shared":[{"color":null,"tag":1612}]}'],
  ]
  for (const c of cases) {
    t.deepEqual(JSON.stringify(c[0].reTesselated().canonicalized().toCompactBinary()).replace('\n', ' '), c[1])
  }
})
